import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.roots.ModuleRootManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;

/*
    Following things are happening in this class
    -   Generating 2 Product interfaces, 1 interface class, 3 classes that will implements interfaces
    -   Getting the path of opened IDE path from Configs class
    -   Saving the generated files into path
    -   Mandatory logging
 */

public class Abstract_Factory_Pattern extends Design_Patterns {
    @Override
    public void Generate_Design_Patterns(AnActionEvent e) {

        Logger logger = LoggerFactory.getLogger(Abstract_Factory_Pattern.class);
        logger.trace("In *Abstract Factory* Class");
        logger.info("Prompting the required classes name for *Abstract factory*");

        boolean check = false;
        boolean key;
        boolean checkNameClash;
        TypeSpec userProductA = null;
        while (!check)
        {
            // taking input
            String ProductA_name =  Messages.showInputDialog(e.getProject(), "Please enter the name of *Product A* interface", "Design Patterns", Messages.getInformationIcon());

            key = Configs.checkKeys(ProductA_name); //check input
            checkNameClash = Configs.isNameClashAbFactory(ProductA_name, e);

            if(key) // check if its true
            {
                if(checkNameClash) {
                    logger.trace("Name Key is legal in *Abstract Factory* Class"); // logger

/*
                    get the correct input and Generate the file
                 */
                    userProductA = TypeSpec.interfaceBuilder(ProductA_name)
                            .addModifiers(Modifier.PUBLIC)
                            .build();

                    JavaFile javaFileProductA = JavaFile.builder("com.mvpjava.javapoet.AbstractFactory", userProductA)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileProductA.writeTo(Paths.get(Configs.getPath())); // saving to opened IDE
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                    }
                    check = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), ProductA_name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");            }

        }

        //==============================End Product A files=====================================================================

        // =============================Product B ========================================
        boolean check2 = false;
        boolean key2;
        boolean checkNameClash1;
        TypeSpec userProductB = null;

        while (!check2)
        {
            // taking input

            String ProductB_name =  Messages.showInputDialog(e.getProject(), "Please enter the name of *Product B* interface", "Design Patterns", Messages.getInformationIcon());

            key2 = Configs.checkKeys(ProductB_name);  //check input
            checkNameClash1 = Configs.isNameClashAbFactory(ProductB_name, e);

            if(key2)
            {
                if(checkNameClash1) {
                    logger.trace("Name Key is legal in *Abstract Factory* Class");
                    logger.trace("Key Passed in *Abstract Factory* Class");
/*
                    get the correct input and Generate the file
                 */
                    userProductB = TypeSpec.interfaceBuilder(ProductB_name)
                            .addModifiers(Modifier.PUBLIC)
                            .build();

                    JavaFile javaFileProductB = JavaFile.builder("com.mvpjava.javapoet.AbstractFactory", userProductB)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileProductB.writeTo(Paths.get(Configs.getPath()));  // saving to opened IDE
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                    }
                    check2 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), ProductB_name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }

        }


//===============================End product B ==============================================
//=========================================Interface file====================================
        boolean check3 = false;
        boolean key3;
        boolean checkNameClash2;
        TypeSpec userInterface = null;

        while (!check3)
        {
            // taking input

            String interface_name =  Messages.showInputDialog(e.getProject(), "Please enter the name of Interface", "Design Patterns", Messages.getInformationIcon());

            key3 = Configs.checkKeys(interface_name);  //check input
            checkNameClash2 = Configs.isNameClashAbFactory(interface_name, e);

            if(key3)
            {
                if(checkNameClash2) {
                    logger.trace("Name Key is legal in *Abstract Factory* Class");
                 /*
                    get the correct input and Generate the file
                 */
                    MethodSpec createA = MethodSpec.methodBuilder("create" + userProductA.name)
                            .addModifiers(Modifier.PUBLIC)
                            .addModifiers(Modifier.ABSTRACT)
                            .returns(ClassName.get("com.mvpjava.javapoet.AbstractFactory", userProductA.name))
                            .build();

                    MethodSpec createB = MethodSpec.methodBuilder("create" + userProductB.name)
                            .addModifiers(Modifier.PUBLIC)
                            .addModifiers(Modifier.ABSTRACT)
                            .returns(ClassName.get("com.mvpjava.javapoet.AbstractFactory", userProductB.name))
                            .build();

                    userInterface = TypeSpec.interfaceBuilder(interface_name)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(createA)
                            .addMethod(createB)
                            .build();

                    JavaFile javaFileInterface = JavaFile.builder("com.mvpjava.javapoet.AbstractFactory", userInterface)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileInterface.writeTo(Paths.get(Configs.getPath())); // saving to opened IDE
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                    }
                    check3 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), interface_name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }

        }

        // -----------------------------------------------------------------------
        // ============================================= Factory class implements ===================================
        boolean check4 = false;
        boolean key4;
        boolean checkNameClash3;

        ClassName className1 = ClassName.get("com.mvpjava.javapoet.AbstractFactory", userInterface.name);
        while (!check4)
        {
            // taking input

            String class_name_interface = Messages.showInputDialog(e.getProject(), "Please enter the name of FACTORY CLASS that implements " + userInterface.name, "Design Patterns", Messages.getInformationIcon());

            key4 = Configs.checkKeys(class_name_interface);  //check input
            checkNameClash3 = Configs.isNameClashAbFactory(class_name_interface, e);

            if(key4)
            {
                if(checkNameClash3) {
                    logger.trace("Name Key is legal in *Abstract Factory* Class");
                 /*
                    get the correct input and Generate the file
                 */
                    MethodSpec createA = MethodSpec.methodBuilder("create" + userProductA.name)
                            .addModifiers(Modifier.PUBLIC)
                            .addStatement("return null")
                            .addAnnotation(Override.class)
                            .returns(ClassName.get("com.mvpjava.javapoet.AbstractFactory", userProductA.name))
                            .build();

                    MethodSpec createB = MethodSpec.methodBuilder("create" + userProductB.name)
                            .addModifiers(Modifier.PUBLIC)
                            .addStatement("return null")
                            .addAnnotation(Override.class)
                            .returns(ClassName.get("com.mvpjava.javapoet.AbstractFactory", userProductB.name))
                            .build();

                    TypeSpec userClassImple = TypeSpec.classBuilder(class_name_interface)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(createA)
                            .addMethod(createB)
                            .addSuperinterface(className1)
                            .build();

                    JavaFile javaFileClassImple = JavaFile.builder("com.mvpjava.javapoet.AbstractFactory", userClassImple)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();
                    try {
                        javaFileClassImple.writeTo(Paths.get(Configs.getPath())); // saving to opened IDE
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Abstract Factory  " + ex.getMessage());

                    }
                    check4 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), class_name_interface + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }

        // ========================== end class implements

        //------------------------------------Client class-----------------------------------------

        boolean check5 = false;
        boolean key5;
        boolean checkNameClash4;

        while (!check5)
        {
            // taking input

            String class_name = Messages.showInputDialog(e.getProject(), "Please enter the name of Client class", "Design Patterns", Messages.getInformationIcon());

            key5 = Configs.checkKeys(class_name);  //check input
            checkNameClash4 = Configs.isNameClashAbFactory(class_name, e);

            if(key5) {

                if(checkNameClash4) {
                    logger.trace("Name Key is legal in *Abstract Factory* Class");
                /*
                    get the correct input and Generate the file
                 */
                    TypeSpec userClient = TypeSpec.classBuilder(class_name)
                            .addModifiers(Modifier.PUBLIC)
                            .build();

                    JavaFile javaFileClient = JavaFile.builder("com.mvpjava.javapoet.AbstractFactory", userClient)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileClient.writeTo(Paths.get(Configs.getPath())); // saving to opened IDE
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occured in Abstract Factory  " + ex.getMessage());
                    }
                    check5 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), class_name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }

        // -------------------------------End client class-------------------------------------------

        //------------------------------------------------------------------------------


        //-----------------------------------Concrete classes---------------------------------------

        boolean check6 = false;
        boolean key6;
        boolean checkNameClash5;

        while (!check6)
        {
            // taking input

            String P1 = Messages.showInputDialog(e.getProject(), "Enter the name of *Product 1* that implements " + userProductA.name, "Design Patterns", Messages.getInformationIcon());
            key6 = Configs.checkKeys(P1);  //check input
            checkNameClash5 = Configs.isNameClashAbFactory(P1, e);

            if(key6)
            {
                if(checkNameClash5) {

                    logger.trace("Name Key is legal in *Abstract Factory* Class");
                /*
                    get the correct input and Generate the file
                 */
                    ClassName className = ClassName.get("com.mvpjava.javapoet.AbstractFactory", userProductA.name);
                    TypeSpec userProduct1 = TypeSpec.classBuilder(P1)
                            .addModifiers(Modifier.PUBLIC)
                            .addSuperinterface(className)
                            .build();

                    JavaFile javaFileProduct1 = JavaFile.builder("com.mvpjava.javapoet.AbstractFactory", userProduct1)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileProduct1.writeTo(Paths.get(Configs.getPath())); // saving to opened IDE
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Abstract Factory  " + ex.getMessage());
                    }

                    check6 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), P1 + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }


//==============================================================================================================

        boolean check7 = false;
        boolean key7;
        boolean checkNameClash6;

        while (!check7)
        {
            // taking input

            String P2 = Messages.showInputDialog(e.getProject(), "Enter the name of *Product 2* that implements " + userProductB.name, "Design Patterns", Messages.getInformationIcon());
            key7 = Configs.checkKeys(P2);  //check input
            checkNameClash6 = Configs.isNameClashAbFactory(P2, e);

            if(key7)
            {
                if(checkNameClash6) {

                    logger.trace("Name Key is legal in *Abstract Factory* Class");
                /*
                    get the correct input and Generate the file
                 */
                    ClassName className = ClassName.get("com.mvpjava.javapoet.AbstractFactory", userProductB.name);
                    TypeSpec userProduct2 = TypeSpec.classBuilder(P2)
                            .addModifiers(Modifier.PUBLIC)
                            .addSuperinterface(className)
                            .build();

                    JavaFile javaFileProduct2 = JavaFile.builder("com.mvpjava.javapoet.AbstractFactory", userProduct2)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileProduct2.writeTo(Paths.get(Configs.getPath())); // saving to opened IDE
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Abstract Factory  " + ex.getMessage());
                    }
                    check7 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), P2 + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }

            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }

        }

        LocalFileSystem.getInstance().refresh(false);
        VirtualFile virtualFile = e.getProject().getWorkspaceFile();
        virtualFile.refresh(false,true);

    }
}
