import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.roots.ModuleRootManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;

/*

    -  Following things are happening in this class
    -   Abstract Colleague, Mediator Interface, a class, 2 Colleagues
    -   Getting the path of opened IDE path from Configs class
    -   Saving the generated files into path
    -   Mandatory logging


*/

public class Mediator_Pattern extends Design_Patterns {
    @Override
    public void Generate_Design_Patterns(AnActionEvent e) {


        Logger logger = LoggerFactory.getLogger(Mediator_Pattern.class);
        logger.trace("In *Mediator* Class");
        logger.info("Prompting the required classes name for *Mediator Pattern*");

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Abstract Colleague Class -----------------------------------------------

        boolean check3 = false;
        boolean key3;
        boolean checkNameClash;

        TypeSpec userColleagueAbstract = null;

        while (!check3)
        {
            String colleague_abstract_class = Messages.showInputDialog(e.getProject(), "Please enter the name of *Abstract Colleague Class*", "Design Patterns", Messages.getInformationIcon());

            key3 = Configs.checkKeys(colleague_abstract_class);
            checkNameClash = Configs.isNameClashMediator(colleague_abstract_class, e);


            if (key3) {
                if(checkNameClash) {
                    logger.trace("Name Key is legal in *Mediator* Class");

                    userColleagueAbstract = TypeSpec.classBuilder(colleague_abstract_class)
                            .addModifiers(Modifier.ABSTRACT)
                            .build();

                    JavaFile javaFileColleagueAbstract = JavaFile.builder("com.mvpjava.javapoet.MediatorPattern", userColleagueAbstract)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileColleagueAbstract.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Mediator Design Pattern  " + ex.getMessage());
                    }
                    check3 = true;
                }
                else
                {
                    Messages.showErrorDialog(e.getProject(), colleague_abstract_class + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            } else {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }

        }

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Mediator Interface  -----------------------------------------------

        boolean check = false;
        boolean key;
        boolean checkNameClash1;
        TypeSpec userMediatorInter = null;

        while (!check)
        {
            String mediatorInterface_name = Messages.showInputDialog(e.getProject(), "Please enter the name of *Mediator Interface*", "Design Patterns", Messages.getInformationIcon());

            key = Configs.checkKeys(mediatorInterface_name);
            checkNameClash1 = Configs.isNameClashMediator(mediatorInterface_name, e);

            if (key) {
                if(checkNameClash1) {
                    logger.trace("Name Key is legal in *Mediator* Class");
                    MethodSpec mediate = MethodSpec.methodBuilder("mediate")
                            .addModifiers(Modifier.ABSTRACT)
                            .addModifiers(Modifier.PUBLIC)
                            .addParameter(ClassName.get("com.mvpjava.javapoet.MediatorPattern", userColleagueAbstract.name), "colleague")
                            .build();

                    userMediatorInter = TypeSpec.interfaceBuilder(mediatorInterface_name)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(mediate)
                            .build();

                    JavaFile javaFileMediatorInter = JavaFile.builder("com.mvpjava.javapoet.MediatorPattern", userMediatorInter)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileMediatorInter.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Mediator Design Pattern  " + ex.getMessage());
                    }
                    check = true;
                }
                else
                {
                    Messages.showErrorDialog(e.getProject(), mediatorInterface_name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            } else {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }

        }

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Mediator Class  -----------------------------------------------

        boolean check2 = false;
        boolean key2;
        boolean checkNameClash2;

        ClassName className = ClassName.get("com.mvpjava.javapoet.MediatorPattern", userMediatorInter.name);

        while (!check2)
        {

            String mediatorClass_name = Messages.showInputDialog(e.getProject(), "Please enter the name of *Mediator class* that implements " + userMediatorInter.name, "Design Patterns", Messages.getInformationIcon());

            key2 = Configs.checkKeys(mediatorClass_name);
            checkNameClash2 = Configs.isNameClashMediator(mediatorClass_name, e);


            if (key2) {
                if(checkNameClash2) {
                    logger.trace("Name Key is legal in *Mediator* Class");
                    MethodSpec mediate = MethodSpec.methodBuilder("mediate")
                            .addModifiers(Modifier.PUBLIC)
                            .addParameter(ClassName.get("com.mvpjava.javapoet.MediatorPattern", userColleagueAbstract.name), "colleague")
                            .addAnnotation(Override.class)
                            .build();


                    TypeSpec userMediatorClass = TypeSpec.classBuilder(mediatorClass_name)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(mediate)
                            .addSuperinterface(className)
                            .build();

                    JavaFile javaFileMediatorClass = JavaFile.builder("com.mvpjava.javapoet.MediatorPattern", userMediatorClass)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileMediatorClass.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Mediator Design Pattern  " + ex.getMessage());
                    }
                    check2 = true;
                }
                else
                {
                    Messages.showErrorDialog(e.getProject(), mediatorClass_name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            } else {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }
        }
        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Colleague Class 1  -----------------------------------------------

        boolean check4 = false;
        boolean key4;
        boolean checkNameClash3;
        ClassName className1 = ClassName.get("com.mvpjava.javapoet.MediatorPattern", userColleagueAbstract.name);

        while (!check4)
        {
            String colleague1_class =  Messages.showInputDialog(e.getProject(), "Please enter the name of *Colleague class 1* that extends " + userColleagueAbstract.name, "Design Patterns", Messages.getInformationIcon());

            key4 = Configs.checkKeys(colleague1_class);
            checkNameClash3 = Configs.isNameClashMediator(colleague1_class, e);


            if(key4) {
                if(checkNameClash3) {
                    logger.trace("Name Key is legal in *Mediator* Class");
                    TypeSpec userColleague1 = TypeSpec.classBuilder(colleague1_class)
                            .addModifiers(Modifier.PUBLIC)
                            .superclass(className1)
                            .build();

                    JavaFile javaFileColleague1 = JavaFile.builder("com.mvpjava.javapoet.MediatorPattern", userColleague1)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileColleague1.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Mediator Design Pattern  " + ex.getMessage());
                    }
                    check4 = true;
                }
                else
                {
                    Messages.showErrorDialog(e.getProject(), colleague1_class + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }
        //===============================================================================================================================================
        //============================================================================================

        boolean check5 = false;
        boolean key5;
        boolean checkNameClash4;

        while (!check5)
        {
            String colleague2_class =  Messages.showInputDialog(e.getProject(), "Please enter the name of *Colleague class 2* that extends " + userColleagueAbstract.name, "Design Patterns", Messages.getInformationIcon());

            key5 = Configs.checkKeys(colleague2_class);
            checkNameClash4 = Configs.isNameClashMediator(colleague2_class, e);


            if(key5) {
                if(checkNameClash4) {
                    logger.trace("Name Key is legal in *Mediator* Class");
                    TypeSpec userColleague2 = TypeSpec.classBuilder(colleague2_class)
                            .addModifiers(Modifier.PUBLIC)
                            .superclass(className1)
                            .build();

                    JavaFile javaFileColleague2 = JavaFile.builder("com.mvpjava.javapoet.MediatorPattern", userColleague2)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileColleague2.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Mediator Design Pattern  " + ex.getMessage());
                    }
                    check5 = true;
                }
                else
                {
                    Messages.showErrorDialog(e.getProject(), colleague2_class + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }
        LocalFileSystem.getInstance().refresh(false);
        VirtualFile virtualFile = e.getProject().getWorkspaceFile();
        virtualFile.refresh(false,true);

    }
}
