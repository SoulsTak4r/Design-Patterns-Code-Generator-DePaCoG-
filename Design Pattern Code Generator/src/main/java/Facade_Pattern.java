import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.roots.ModuleRootManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;


/*

    -  Following things are happening in this class
    -   1 interface, 1 maker class, Concrete classes
    -   Getting the path of opened IDE path from Configs class
    -   Saving the generated files into path
    -   Mandatory logging


  */



public class Facade_Pattern extends Design_Patterns {
    @Override
    public void Generate_Design_Patterns(AnActionEvent e) {

        Logger logger = LoggerFactory.getLogger(Facade_Pattern.class);

        logger.trace("In *Facade* Class");
        logger.info("Prompting the required classes name for *Facade Pattern*");
    //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Interface -----------------------------------------------
        boolean check = false;
        boolean key;
        boolean checkNameClash;
        TypeSpec userInterface = null;

        while (!check)
        {
            String get_AbstractName = Messages.showInputDialog(e.getProject(), "Please enter the name of *INTERFACE*", "Design Patterns", Messages.getInformationIcon());

            key = Configs.checkKeys(get_AbstractName);
            checkNameClash = Configs.isNameClashFacade(get_AbstractName, e);

            if(key) {
                if(checkNameClash) {
                    logger.trace("Name Key is legal in *Facade* Class");

                    MethodSpec operations = MethodSpec.methodBuilder("Operations")
                            .addModifiers(Modifier.PUBLIC)
                            .addModifiers(Modifier.ABSTRACT)
                            .build();

                    userInterface = TypeSpec.interfaceBuilder(get_AbstractName)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(operations)
                            .build();

                    JavaFile javaFileAbstract = JavaFile.builder("com.mvpjava.javapoet.FacadePattern", userInterface)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileAbstract.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Facade Design Pattern  " + ex.getMessage());
                    }
                    check = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), get_AbstractName + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Maker -----------------------------------------------

        boolean check1 = false;
        boolean key1;
        boolean checkNameClash1;

        while (!check1)
        {
            String get_className = Messages.showInputDialog(e.getProject(), "Please enter the name of *Maker* class that return objects", "Design Patterns", Messages.getInformationIcon());

            key1 = Configs.checkKeys(get_className);
            checkNameClash1 = Configs.isNameClashFacade(get_className, e);

            if(key1) {
                if(checkNameClash1) {
                    logger.trace("Name Key is legal in *Facade* Class");
                    TypeSpec userClass = TypeSpec.classBuilder(get_className)
                            .addModifiers(Modifier.PUBLIC)
                            .build();

                    JavaFile javaFileClass = JavaFile.builder("com.mvpjava.javapoet.FacadePattern", userClass)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileClass.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Facade Design Pattern  " + ex.getMessage());
                    }
                    check1 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), get_className + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Products -----------------------------------------------
        boolean check2 = false;
        boolean key2;
        boolean checkNameClash2;
        ClassName className = ClassName.get("com.mvpjava.javapoet.FacadePattern", userInterface.name);

        while (!check2)
        {
            String name1 = Messages.showInputDialog(e.getProject(), "Please enter the name of *Product 1* class that implements " + userInterface.name, "Design Patterns", Messages.getInformationIcon());

            key2 = Configs.checkKeys(name1);
            checkNameClash2 = Configs.isNameClashFacade(name1, e);

            if(key2) {

                if(checkNameClash2) {

                    logger.trace("Name Key is legal in *Facade* Class");
                    MethodSpec operations = MethodSpec.methodBuilder("Operations")
                            .addModifiers(Modifier.PUBLIC)
                            .addAnnotation(Override.class)
                            .build();

                    TypeSpec userProduct1 = TypeSpec.classBuilder(name1)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(operations)
                            .addSuperinterface(className)
                            .build();

                    JavaFile javaFileProduct1 = JavaFile.builder("com.mvpjava.javapoet.FacadePattern", userProduct1)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileProduct1.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Facade Design Pattern  " + ex.getMessage());
                    }
                    check2 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), name1 + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }

        //=============================================================================================
        //===================================================================================================

        boolean check3 = false;
        boolean key3;
        boolean checkNameClash3;

        while (!check3)
        {
            String name2 = Messages.showInputDialog(e.getProject(), "Please enter the name of *Product 2* class that implements " + userInterface.name, "Design Patterns", Messages.getInformationIcon());

            key3 = Configs.checkKeys(name2);
            checkNameClash3 = Configs.isNameClashFacade(name2, e);

            if(key3) {

                if(checkNameClash3) {
                    logger.trace("Name Key is legal in *Facade* Class");
                    MethodSpec operations = MethodSpec.methodBuilder("Operations")
                            .addModifiers(Modifier.PUBLIC)
                            .addAnnotation(Override.class)
                            .build();

                    TypeSpec userProduct2 = TypeSpec.classBuilder(name2)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(operations)
                            .addSuperinterface(className)
                            .build();

                    JavaFile javaFileProduct2 = JavaFile.builder("com.mvpjava.javapoet.FacadePattern", userProduct2)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileProduct2.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Facade Design Pattern  " + ex.getMessage());
                    }
                    check3 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), name2 + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }
        LocalFileSystem.getInstance().refresh(false);
        VirtualFile virtualFile = e.getProject().getWorkspaceFile();
        virtualFile.refresh(false,true);

    }
}
