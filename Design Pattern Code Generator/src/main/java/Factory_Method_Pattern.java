import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.roots.ModuleRootManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;


/*

    -  Following things are happening in this class
    -   Product Interface, Abstract class, Products, and a class that extends Abstract class
    -   Getting the path of opened IDE path from Configs class
    -   Saving the generated files into path
    -   Mandatory logging


*/

public class Factory_Method_Pattern extends Design_Patterns {
    @Override
    public void Generate_Design_Patterns(AnActionEvent e) {


        Logger logger = LoggerFactory.getLogger(Factory_Method_Pattern.class);
        logger.trace("In *Factory Method* Class");
        logger.info("Prompting the required classes name for *Factory Method Pattern*");

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Product Interface -----------------------------------------------

        boolean check = false;
        boolean key;
        boolean checkNameClash;

        TypeSpec userInterface = null;

        while (!check)
        {
            String get_interfaceName = Messages.showInputDialog(e.getProject(), "Please enter the name of *PRODUCT INTERFACE*", "Design Patterns", Messages.getInformationIcon());

            key = Configs.checkKeys(get_interfaceName);
            checkNameClash = Configs.isNameClashFactory(get_interfaceName, e);

            if(key) {
                if(checkNameClash) {
                    logger.trace("Name Key is legal in *Factory Method* Class");

                    userInterface = TypeSpec.interfaceBuilder(get_interfaceName)
                            .addModifiers(Modifier.PUBLIC)

                            .build();

                    JavaFile javaFileInterface = JavaFile.builder("com.mvpjava.javapoet.FactoryMethod", userInterface)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileInterface.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Factory Method  " + ex.getMessage());
                    }
                    check = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), get_interfaceName + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Abstract Class -----------------------------------------------

        boolean check2 = false;
        boolean key2;
        boolean checkNameClash1;
        TypeSpec userAbstract = null;

        MethodSpec factoryMethod = null;
        while (!check2)
        {
            String get_abstractName = Messages.showInputDialog(e.getProject(), "Please enter the name of *Abstract Class*", "Design Patterns", Messages.getInformationIcon());

            key2 = Configs.checkKeys(get_abstractName);
            checkNameClash1 = Configs.isNameClashFactory(get_abstractName, e);

            if(key2) {
                if(checkNameClash1) {
                    logger.trace("Name Key is legal in *Factory Method* Class");
                    factoryMethod = MethodSpec.methodBuilder("factoryMethod")
                            .addModifiers(Modifier.PUBLIC)
                            .addModifiers(Modifier.ABSTRACT)
                            .returns(ClassName.get("com.mvpjava.javapoet.FactoryMethod", userInterface.name))
                            .build();

                    userAbstract = TypeSpec.classBuilder(get_abstractName)
                            .addModifiers(Modifier.ABSTRACT)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(factoryMethod)
                            .build();

                    JavaFile javaFileAbstract = JavaFile.builder("com.mvpjava.javapoet.FactoryMethod", userAbstract)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileAbstract.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Factory Method  " + ex.getMessage());
                    }
                    check2 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), get_abstractName + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }

        }

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Class -----------------------------------------------
        boolean check3 = false;
        boolean key3;
        boolean checkNameClash2;
        ClassName name = ClassName.get("com.mvpjava.javapoet.FactoryMethod", userAbstract.name);

        while (!check3)
        {
            String get_className = Messages.showInputDialog(e.getProject(), "Please enter the name of *Class* that extends " + userAbstract.name, "Design Patterns", Messages.getInformationIcon());

            key3 = Configs.checkKeys(get_className);
            checkNameClash2 = Configs.isNameClashFactory(get_className, e);


            if(key3) {
                if(checkNameClash2) {
                    logger.trace("Name Key is legal in *Factory Method* Class");
                    TypeSpec userClass = TypeSpec.classBuilder(get_className)
                            .addModifiers(Modifier.PUBLIC)
                            .superclass(name)
                            .addMethod(MethodSpec.methodBuilder("factoryMethod")
                                    .addModifiers(Modifier.PUBLIC).returns(ClassName.get("com.mvpjava.javapoet.FactoryMethod", userInterface.name))
                                    .addAnnotation(Override.class)
                                    .addCode("return null;")
                                    .build())
                            .build();

                    JavaFile javaFileClass = JavaFile.builder("com.mvpjava.javapoet.FactoryMethod", userClass)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileClass.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Factory Method  " + ex.getMessage());
                    }
                    check3 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), get_className + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }

        }

        //=============================================================================================
        //===================================================================================================
        //------------------------------------------ Products -----------------------------------------------
        ClassName interfaceName = ClassName.get("com.mvpjava.javapoet.FactoryMethod", userInterface.name);
        boolean check4 = false;
        boolean key4;
        boolean checkNameClash3;

        while (!check4)
        {
            String get_classImplement1 = Messages.showInputDialog(e.getProject(), "Please enter the name of *Product 1* that implements " + userInterface.name, "Design Patterns", Messages.getInformationIcon());

            key4 = Configs.checkKeys(get_classImplement1);
            checkNameClash3 = Configs.isNameClashFactory(get_classImplement1, e);

            if(key4) {
                if(checkNameClash3) {
                    logger.trace("Name Key is legal in *Factory Method* Class");
                    TypeSpec userClassImplement1 = TypeSpec.classBuilder(get_classImplement1)
                            .addModifiers(Modifier.PUBLIC)
                            .addSuperinterface(interfaceName)
                            .build();

                    JavaFile javaFileClassImplement1 = JavaFile.builder("com.mvpjava.javapoet.FactoryMethod", userClassImplement1)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileClassImplement1.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Factory Method  " + ex.getMessage());
                    }
                    check4 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), get_classImplement1 + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }

        //=============================================================================================
        //===================================================================================================

        boolean check5 = false;
        boolean key5;
        boolean checkNameClash4;

        while (!check5)
        {
            String get_classImplement2 = Messages.showInputDialog(e.getProject(), "Please enter the name of *Product 2* that implements " + userInterface.name, "Design Patterns", Messages.getInformationIcon());

            key5 = Configs.checkKeys(get_classImplement2);
            checkNameClash4 = Configs.isNameClashFactory(get_classImplement2, e);

            if(key5) {
                if(checkNameClash4) {

                    logger.trace("Name Key is legal in *Factory Method* Class");
                    TypeSpec userClassImplement2 = TypeSpec.classBuilder(get_classImplement2)
                            .addModifiers(Modifier.PUBLIC)
                            .addSuperinterface(interfaceName)
                            .build();

                    JavaFile javaFileClassImplement2 = JavaFile.builder("com.mvpjava.javapoet.FactoryMethod", userClassImplement2)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileClassImplement2.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Factory Method  " + ex.getMessage());
                    }
                    check5 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), get_classImplement2 + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }
        LocalFileSystem.getInstance().refresh(false);
        VirtualFile virtualFile = e.getProject().getWorkspaceFile();
        virtualFile.refresh(false,true);

    }
}
