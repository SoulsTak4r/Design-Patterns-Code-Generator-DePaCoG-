import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.roots.ModuleRootManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;

/*

        Following things are happening in this class
    -   Client class, Handler Interface, 2 Receivers
    -   Getting the path of opened IDE path from Configs class
    -   Saving the generated files into path
    -   Mandatory logging


  */


public class Chain_Of_Responsibility_Pattern extends Design_Patterns {
    @Override
    public void Generate_Design_Patterns(AnActionEvent e) {

        Logger logger = LoggerFactory.getLogger(Chain_Of_Responsibility_Pattern.class);
        logger.trace("In *Chain of Responsibility* Class");
        logger.info("Prompting the required classes name for *Chain of Responsibility Pattern*");

        //=============================================================================================================
        //=============================================================================================================
        //-------------------------------------Client ---------------------------------------------------------------

        boolean check = false;
        boolean key;
        boolean checkNameClash;
        while (!check)
        {
            String client_name = Messages.showInputDialog(e.getProject(), "Please enter the name of *Client* class", "Design Patterns", Messages.getInformationIcon());

            key = Configs.checkKeys(client_name);
            checkNameClash = Configs.isNameClashChain(client_name, e);

            if(key) {
                if(checkNameClash) {
                    logger.trace("Name Key is legal in *Chain* Class");
                    TypeSpec userClient = TypeSpec.classBuilder(client_name)
                            .addModifiers(Modifier.PUBLIC)
                            .build();

                    JavaFile javaFileClient = JavaFile.builder("com.mvpjava.javapoet.ChainOfResponsibility", userClient)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileClient.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Chain Of Responsibility Pattern  " + ex.getMessage());
                    }
                    check = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), client_name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }

        }

        //=============================================================================================================
        //=============================================================================================================
        //------------------------------------- Handler ---------------------------------------------------------------
        boolean check1 = false;
        boolean key1;
        boolean checkNameClash1;
        TypeSpec userHandler = null;

        while (!check1)
        {
            String handler_name = Messages.showInputDialog(e.getProject(), "Please enter the name of *Handler Interface*", "Design Patterns", Messages.getInformationIcon());
            key1 = Configs.checkKeys(handler_name);
            checkNameClash1 = Configs.isNameClashChain(handler_name, e);

            if(key1) {
                if(checkNameClash1) {
                    logger.trace("Name Key is legal in *Chain* Class");

                    MethodSpec handler = MethodSpec.methodBuilder("handleRequest")
                            .addModifiers(Modifier.PUBLIC)
                            .addModifiers(Modifier.ABSTRACT)
                            .build();

                    userHandler = TypeSpec.interfaceBuilder(handler_name)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(handler)
                            .build();

                    JavaFile javaFileHandler = JavaFile.builder("com.mvpjava.javapoet.ChainOfResponsibility", userHandler)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileHandler.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Chain Of Responsibility Pattern  " + ex.getMessage());
                    }
                    check1 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), handler_name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }
        }

        //=============================================================================================================
        //=============================================================================================================
        //------------------------------------- Concrete Classes ---------------------------------------------------------------

        boolean check2 = false;
        boolean key2;
        boolean checkNameClash2;
        ClassName className = ClassName.get("com.mvpjava.javapoet.ChainOfResponsibility", userHandler.name);

        while (!check2)
        {
            String reciever_name1 = Messages.showInputDialog(e.getProject(), "Please enter the name of *Receiver 1* that Implements " + userHandler.name, "Design Patterns", Messages.getInformationIcon());

            key2 = Configs.checkKeys(reciever_name1);
            checkNameClash2 = Configs.isNameClashChain(reciever_name1, e);

            if(key2) {

                if (checkNameClash2) {
                    logger.trace("Name Key is legal in *Chain* Class");

                    TypeSpec userReceiver1 = TypeSpec.classBuilder(reciever_name1)
                            .addModifiers(Modifier.PUBLIC)
                            .addSuperinterface(className)
                            .addMethod(MethodSpec.methodBuilder("handleRequest")
                                    .addModifiers(Modifier.PUBLIC)
                                    .addAnnotation(Override.class)
                                    .build())
                            .build();

                    JavaFile javaFileReceiver1 = JavaFile.builder("com.mvpjava.javapoet.ChainOfResponsibility", userReceiver1)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileReceiver1.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Chain Of Responsibility Pattern  " + ex.getMessage());
                    }
                    check2 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), reciever_name1 + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }
        }

        //====================================================================================================================================================

        boolean check3 = false;
        boolean key3;
        boolean checkNameClash3;
        while (!check3)
        {
            String reciever_name2 = Messages.showInputDialog(e.getProject(), "Please enter the name of *Receiver 2* that Implements " + userHandler.name, "Design Patterns", Messages.getInformationIcon());

            key3 = Configs.checkKeys(reciever_name2);
            checkNameClash3 = Configs.isNameClashChain(reciever_name2, e);

            if(key3) {
                if(checkNameClash3) {
                    logger.trace("Name Key is legal in *Chain* Class");

                    TypeSpec userReceiver2 = TypeSpec.classBuilder(reciever_name2)
                            .addModifiers(Modifier.PUBLIC)
                            .addSuperinterface(className)
                            .addMethod(MethodSpec.methodBuilder("handleRequest")
                                    .addModifiers(Modifier.PUBLIC)
                                    .addAnnotation(Override.class)
                                    .build())
                            .build();

                    JavaFile javaFileReceiver2 = JavaFile.builder("com.mvpjava.javapoet.ChainOfResponsibility", userReceiver2)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileReceiver2.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Chain Of Responsibility Pattern  " + ex.getMessage());
                    }
                    check3 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), reciever_name2 + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }
        }
        LocalFileSystem.getInstance().refresh(false);
        VirtualFile virtualFile = e.getProject().getWorkspaceFile();
        virtualFile.refresh(false,true);

    }
}
