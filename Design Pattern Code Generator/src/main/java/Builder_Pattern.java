import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.vfs.LocalFileSystem;
import com.intellij.openapi.vfs.VirtualFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Paths;

/*

    Following things are happening in this class
    -   1 interface, a class that implements interface, builder interface, Concrete Class, Director class and A complex object class
    -   Getting the path of opened IDE path from Configs class
    -   Saving the generated files into path
    -   Mandatory logging


 */



public class Builder_Pattern extends Design_Patterns {
    @Override
    public void Generate_Design_Patterns(AnActionEvent e) {

        Logger logger = LoggerFactory.getLogger(Builder_Pattern.class);
        logger.trace("In *Builder Pattern* Class");
        logger.info("Prompting the required classes name for *Builder Pattern*");

//===========================================================================================
        boolean check = false;
        boolean key;
        boolean checkNameClash;
        TypeSpec userInterface = null;

        while (!check)
        {
            String getPlanName = Messages.showInputDialog(e.getProject(), "Please enter the name of *INTERFACE* to plan", "Design Patterns", Messages.getInformationIcon());

            key = Configs.checkKeys(getPlanName);
            checkNameClash = Configs.isNameClashBuilder(getPlanName, e);

            if(key) {

                if(checkNameClash) {

                    logger.trace("Name Key is legal in *Builder* Class");
                    MethodSpec buildA = MethodSpec.methodBuilder("buildPartA")
                            .addModifiers(Modifier.PUBLIC)
                            .addModifiers(Modifier.ABSTRACT)
                            .build();

                    MethodSpec buildB = MethodSpec.methodBuilder("buildPartB")
                            .addModifiers(Modifier.PUBLIC)
                            .addModifiers(Modifier.ABSTRACT)
                            .build();

                    userInterface = TypeSpec.interfaceBuilder(getPlanName)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(buildA)
                            .addMethod(buildB)
                            .build();

                    JavaFile javaFileInterface = JavaFile.builder("com.mvpjava.javapoet.BuilderPattern", userInterface)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileInterface.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Builder Pattern  " + ex.getMessage());
                    }
                    check = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), getPlanName + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }
        }

        //==============================================================================================================
        // =============================================================================================================
        // ---------------------------------- builder class implements interface ----------------------------------

        boolean check1 = false;
        boolean key1;
        boolean checkNameClash1;
        ClassName className = ClassName.get("com.mvpjava.javapoet.BuilderPattern", userInterface.name);

        while (!check1)
        {

            String get_set_plan = Messages.showInputDialog(e.getProject(), "Please enter the name of *CLASS* that implements " + userInterface.name, "Design Patterns", Messages.getInformationIcon());

            key1 = Configs.checkKeys(get_set_plan);
            checkNameClash1 = Configs.isNameClashBuilder(get_set_plan, e);

            if(key1) {

                if(checkNameClash1) {

                    logger.trace("Name Key is legal in *Builder* Class");

                    MethodSpec buildA = MethodSpec.methodBuilder("buildPartA")
                            .addModifiers(Modifier.PUBLIC)
                            .addAnnotation(Override.class)
                            .build();

                    MethodSpec buildB = MethodSpec.methodBuilder("buildPartB")
                            .addModifiers(Modifier.PUBLIC)
                            .addAnnotation(Override.class)
                            .build();

                    TypeSpec userPlan = TypeSpec.classBuilder(get_set_plan)
                            .addModifiers(Modifier.PUBLIC)
                            .addMethod(buildA)
                            .addMethod(buildB)
                            .addSuperinterface(className)
                            .build();

                    JavaFile javaFilePlan = JavaFile.builder("com.mvpjava.javapoet.BuilderPattern", userPlan)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFilePlan.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Builder Pattern  " + ex.getMessage());
                    }
                    check1 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), get_set_plan + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");
            }


        }

        //==============================================================================================================
        // =============================================================================================================

        //---------------------------------------------Builder Interface---------------------------------------------------------

        boolean check2 = false;
        boolean key2;
        boolean checkNameClash2;
        TypeSpec userInterface1 = null;

        while (!check2)
        {
            String builderName =  Messages.showInputDialog(e.getProject(), "Please enter the name of *Builder Interface*", "Design Patterns", Messages.getInformationIcon());
            key2 = Configs.checkKeys(builderName);
            checkNameClash2 = Configs.isNameClashBuilder(builderName, e);

            if(key2) {

                if(checkNameClash2) {

                    logger.trace("Name Key is legal in *Builder* Class");

                    userInterface1 = TypeSpec.interfaceBuilder(builderName)
                            .addModifiers(Modifier.PUBLIC)
                            .build();

                    JavaFile javaFileInterface1 = JavaFile.builder("com.mvpjava.javapoet.BuilderPattern", userInterface1)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileInterface1.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Builder Pattern  " + ex.getMessage());
                    }
                    check2 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), builderName + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }
        }
        //==============================================================================================================
        // =============================================================================================================

        //---------------------------------------------Concrete Classes---------------------------------------------------------
        boolean check3 = false;
        boolean key3;
        boolean checkNameClash3;
        ClassName className1 = ClassName.get("com.mvpjava.javapoet.BuilderPattern", userInterface1.name);
        while (!check3)
        {
            String concreteName = Messages.showInputDialog(e.getProject(), "Please enter the name of *Concrete Class* that implements the " + userInterface1.name, "Design Patterns", Messages.getInformationIcon());

            key3 = Configs.checkKeys(concreteName);
            checkNameClash3 = Configs.isNameClashBuilder(concreteName, e);

            if(key3) {
                if(checkNameClash3) {
                    logger.trace("Name Key is legal in *Builder* Class");
                    TypeSpec userConcrete = TypeSpec.classBuilder(concreteName)
                            .addModifiers(Modifier.PUBLIC)
                            .addSuperinterface(className1)
                            .build();

                    JavaFile javaFileConcrete = JavaFile.builder("com.mvpjava.javapoet.BuilderPattern", userConcrete)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileConcrete.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Builder Pattern  " + ex.getMessage());
                    }
                    check3 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), concreteName + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }
        }

        //==============================================================================================================
        // =============================================================================================================

        //---------------------------------------------Director Class---------------------------------------------------------
        boolean check4 = false;
        boolean key4;
        boolean checkNameClash4;
        while (!check4)
        {
            String director_Name = Messages.showInputDialog(e.getProject(), "Please enter the name of *Director Class*", "Design Patterns", Messages.getInformationIcon());

            key4 = Configs.checkKeys(director_Name);
            checkNameClash4 = Configs.isNameClashBuilder(director_Name, e);

            if(key4) {
                if(checkNameClash4) {
                    logger.trace("Name Key is legal in *Builder* Class");
                    TypeSpec userDirector = TypeSpec.classBuilder(director_Name)
                            .addModifiers(Modifier.PUBLIC)
                            .build();

                    JavaFile javaFileDirector = JavaFile.builder("com.mvpjava.javapoet.BuilderPattern", userDirector)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileDirector.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Builder Pattern  " + ex.getMessage());
                    }
                    check4 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), director_Name + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }
        }

        //==============================================================================================================
        // =============================================================================================================

        //---------------------------------------------Complex Object Class---------------------------------------------------------
        boolean check5 = false;
        boolean key5;
        boolean checkNAmeClash5;
        while (!check5)
        {

            String ComplexObject = Messages.showInputDialog(e.getProject(), "Please enter the name of *Complex Object Class*", "Design Patterns", Messages.getInformationIcon());

            key5 = Configs.checkKeys(ComplexObject);
            checkNAmeClash5 = Configs.isNameClashBuilder(ComplexObject, e);

            if(key5) {
                if(checkNAmeClash5) {
                    logger.trace("Name Key is legal in *Builder* Class");
                    TypeSpec userDirector = TypeSpec.classBuilder(ComplexObject)
                            .addModifiers(Modifier.PUBLIC)
                            .build();

                    JavaFile javaFileDirector = JavaFile.builder("com.mvpjava.javapoet.BuilderPattern", userDirector)
                            .addFileComment("AUTO_GENERATED BY JavaPoet")
                            .build();

                    try {
                        javaFileDirector.writeTo(Paths.get(Configs.getPath()));
                    } catch (IOException ex) {
                        logger.error("Exception could Occurred");
                        System.out.println("An exception has occurred in Builder Pattern  " + ex.getMessage());
                    }
                    check5 = true;
                }
                else
                {
                    logger.error("User entered an already existing name");
                    Messages.showErrorDialog(e.getProject(), ComplexObject + " is already exist in the project.. Please enter a different name", "Design Patterns");
                }
            }
            else
            {
                logger.error("User entered an invalid name");
                Messages.showErrorDialog(e.getProject(), "***Error. Please Enter the Valid name", "Design Patterns");

            }
        }

        LocalFileSystem.getInstance().refresh(false);
        VirtualFile virtualFile = e.getProject().getWorkspaceFile();
        virtualFile.refresh(false,true);

    }

}
